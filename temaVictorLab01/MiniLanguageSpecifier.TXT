C-Victor language
1 .Language Definition:
  1.1 Alphabet:
  1.1.a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
      b. Decimal digits (0-9)
      (Other characters will result in a lexic error)
      Lexic:
      		a.Special symbols, representing:
	 		- operators + - * / = < <= = >= != == ++ --
	 		- separators [ ] { }  ( ) ; space   , . 
	 		- reserved words:
	    			int  char if else  char read write for set   main
      		b.identifiers
	     		identifier = letter[{letter | digit}]
	     		letter = "A" | "B" | . ..| "Z"|"a" | "b" | ... | "z"
	     		digit = "0" | "1" |...| "9"
			
      		c.constants
	 		1.integer - rule:
	      			integer = ["+"|"-"]nonzeroDigit{digit}|"0"
				nonzeroDigit = "1"|"2"|...|"9"
				digit = "0"|nonzeroDigit
	 		2.character (aka char)
	     			character:='letter'|'digit'
	 		3.set == array (aka my user defined tipe,can be only with integer)
	      			set = "("[int_list]")"
				int_list = integer {"," integer}
 2.2 Syntax:
	a) Sintactical Rules:
	The words - predefined tokens are specified between " and ":
	
		program = "int main ()" "{" stmtlist "}"
		stmtlist = stmt{stmt}
		stmt = declstmt | assignstmt | iostmt  | forstmt | ifstmt
		declstmt = vardeclstmt | arraydeclstmt
		vardeclstmt = type identifier";"
		arraydeclstmt = "int" identifier"["nonzero_digit"]"";"
		type = "int" | "char"
		assignstmt = variableassignstmt | arrayasignstmt
		variableassignstmt = identifier "=" expression ";"  | identifier "=" charExpression ";"
		charExpression = "'"letter"'"
		arrayassignstmt = identifier"["digit"]" "=" expression";"
		iostmt = input | output
		input = "read""(" identifier ")"";"
		output = "write""(" expression ")"";"
		ifstmt = "if""(" condition ")""{" stmtlist "}" [ "else""{" stmtlist "}" ]
		forstmt = "for""(" varassignstmt "," condition "," varmodifystmt ")""{" stmtlist "}"
		varmodifystmt = varindentstmt | vardecrementstmt
		varindentstmt = identifier"++"
		vardecrementstmt = identifier"--"
		condition = expression
		expression = expression operation expression | term
		operation = "+" | "-" | "*" | "/" 
		term = identifier | const
		const = nonzero_digit{digit}
		


	b) lexical rules:
			identifier = letter{letter | digit}
	     		letter = "A" | "B" | . ..| "Z"|"a" | "b" | ... | "z"
	     		digit = "0" | "1" |...| "9"
			RELATION = "<" | "<=" | "==" | "!=" | ">=" | ">" 
	Codification table:
		
		identifier -> 0
		constant -> 1
		int -> 2
		( -> 3
		) -> 4
		{ -> 5
		{ -> 6
		char -> 7
		[ -> 8
		] -> 9
		; -> 10
		if -> 11
		for -> 12
		++ ->13
		= -> 14
		== -> 15
		!= -> 16
		< -> 17
		<= -> 18
		> -> 19
		>= -> 20
		+ -> 21
		- -> 22
		* -> 23
		/ -> 24
		write -> 25
		read -> 26
		else -> 27
		set -> 28
		beginexecution -> 29
		endexecution -> 30
		-- -> 31
		main ->3 2
 		
		RULES (CONDITIONS):
		There are some illegal characters : "_" and "/" and ":" and "\"
		The relation can be only between numbers
		identifiers can contain maximum 8 haracters and can not contain '_'
		set/array have a maximum size of 10 numbers
		
		

   

