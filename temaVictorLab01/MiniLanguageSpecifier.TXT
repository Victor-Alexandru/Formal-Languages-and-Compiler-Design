C-Victor language
1 .Language Definition:
  1.1 Alphabet:
  1.1.a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
      b. Decimal digits (0-9)
      (Other characters will result in a lexic error)
      Lexic:
      		a.Special symbols, representing:
	 		- operators + - * / = < <= = >= != ==
	 		- separators [ ] { }  ( ) ; space ,  . :
	 		- reserved words:
	    			int begin end char if else  char read write for set in begindeclaration enddeclaration beginexecution endexecution add
      		b.identifiers
	     		identifier = letter[{letter | digit}]
	     		letter = "A" | "B" | . ..| "Z"|"a" | "b" | ... | "z"
	     		digit = "0" | "1" |...| "9"
			
      		c.constants
	 		1.integer - rule:
	      			integer = ["+"|"-"]nonzeroDigit{digit}|"0"
				nonzeroDigit = "1"|"2"|...|"9"
				digit = "0"|nonzeroDigit
	 		2.character (aka char)
	     			character:='letter'|'digit'
	 		3.set (aka my user defined tipe,can be only with integer)
	      			set = "("[int_list]")"
				int_list = integer {"," integer}
 2.2 Syntax:
	a) Sintactical Rules:
	The words - predefined tokens are specified between " and ":
		program = "begin" "begindeclaration" decllist "enddeclaration" "beginexecution" stmtlist "endexecution" "end"
                decllist = declaration | { declaration }
		declaration = type Identifier ";"
		type = "int" | "char" | "set"
		stmtlist = assignstmt | iostmt |  forstmt | ifstmt
		assignstmt = variableassignstmt | setasignstmt	
		variableassignstmt = identifier "=" expression ";"  | identifier "=" charExpression ";"
		charExpression = "'" letter "'"
		expression = expression operation expression | term
		operation = "+" | "-" | "*" | "/" 
		term = identifier | digit
		setassignstmt = identifier".""add""(" integer")"";"
		iostmt = input | output
		input = "read""(" identifier ")"";"
		output = "write""(" expression ")"";"
		ifstmt = "if""(" condition ")""{" stmtlist "}" [ "else""{" stmtlist "}" ] 
		forstmt = "for" indetifier " in " set "{" stmtlist "}" 
		condition = expression

	b) lexical rules:
			identifier = letter[{letter | digit}]
	     		letter = "A" | "B" | . ..| "Z"|"a" | "b" | ... | "z"
	     		digit = "0" | "1" |...| "9"
			RELATION = "<" | "<=" | "==" | "!=" | ">=" | ">" 
	Codification table:
		
		identifier -> 0
		constant -> 1
		int -> 2
		( -> 3
		) -> 4
		{ -> 5
		{ -> 6
		char -> 7
		[ -> 8
		] -> 9
		; -> 10
		if -> 11
		for -> 12
		in -> 13
		= -> 14
		== -> 15
		!= -> 16
		< -> 17
		<= -> 18
		> -> 19
		>= -> 20
		+ -> 21
		- -> 22
		* -> 23
		/ -> 24
		write -> 25
		read -> 26
		else -> 27
		begin-> 28
		end-> 29
		begindeclaration -> 29
		enddeclaration -> 30
		set -> 31
		beginexecution -> 32
		endexecution -> 33
		add -> 34
 		
		RULES (CONDITIONS):
		identifiers can contain maximum 8 characters
		the identifier in the for in loop must not exist in the simbol table,will be addded , and when it will be out of scope it will be removed from the table
		set can only be iterate in a for in loop
		set have a maximum size of 10 numbers
		
		

   

